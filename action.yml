name: Github Actions validator
description: Validate the Github Actions workflows

inputs:
  actionlint-version:
    description: Version of actionlint to use
    default: 1.6.27
  shellcheck-disable-codes:
    description: Comma-separated list of shellcheck codes to ignore (see https://www.shellcheck.net/wiki/Ignore)
    default: ""

runs:
  using: "composite"
  steps:
    - name: Install actionlint
      uses: asdf-vm/actions/install@v3
      with:
        tool_versions: |
          actionlint ${{ inputs.actionlint-version }}

    - name: Configure actionlint
      shell: bash
      run: |
        cat << EOF > .github/actionlint.yaml
        self-hosted-runner:
          labels:
            - aws-gpu-runner
        EOF

    - name: Prepare shellcheck opts
      id: prepare-shellcheck-opts
      shell: bash
      run: |
        excludes=""
        if [ -n "${{ inputs.shellcheck-disable-codes }}" ]; then
          excludes="-e $(echo ${{ inputs.shellcheck-disable-codes }} | sed -e 's/^,//' -e 's/,$//' -e sed 's/,/ -e /g')"
        fi
        opts="$excludes"
        echo "opts=${opts}" >> $GITHUB_OUTPUT

    - name: Run actionlint and format output as JSON
      id: actionlint
      shell: bash
      run: actionlint -format '{{json .}}' | tee actionlint_output.json
      env:
        SHELLCHECK_OPTS: ${{ steps.prepare-shellcheck-opts.outputs.opts }}

    - name: Set status
      shell: bash
      run: jq -e 'length == 0' actionlint_output.json

    - name: Generate comment
      if: success() || failure()
      shell: python
      run: |
        import json
        import re

        def get_shellcheck_link(message: str) -> str | None:
            shellcheck_url = "https://www.shellcheck.net/wiki"
            if match := re.search(r"shellcheck reported issue in this script: (SC\d+)", message):
                return f"{shellcheck_url}/{match.group(1)}"

        with open("actionlint_output.json") as fd:
            data = json.load(fd)

        errors_by_file = {}
        for error in data:
            errors_by_file.setdefault(error["filepath"], []).append(error)

        comment = ""
        for file, errors in errors_by_file.items():
            file_comment_lines = [f"<details><summary><code>{file}</code></summary>"]
            error_comments = []
            for error in errors:
                url = f"https://github.com/${{ github.repository }}/blob/${{ github.sha }}/{file}#L{error['line']}"
                snippet_lines = ["<pre>", *error["snippet"].split("\n"), "</pre>"]
                error_comment_lines = [error["message"]]
                if shellcheck_link := get_shellcheck_link(error["message"]):
                    error_comment_lines.append(f"<a href={shellcheck_link}>View shellcheck error</a>")
                error_comment_lines.extend([
                    f"<a href={url}>View in file</a>",
                    "\n".join(snippet_lines),
                ])
                error_comment = "<br />".join(error_comment_lines)
                error_comments.append(error_comment)
            errors_comment = "<hr />".join(error_comments)
            file_comment_lines.append(errors_comment)
            file_comment_lines.append("</details>")
            comment += "<br />".join(file_comment_lines)

        with open("comment.md", "w") as fd:
            fd.write("## :warning: Github Actions validator failed\n\n")
            fd.write(comment)

    - name: Post results in PR (failure)
      if: failure()
      uses: thollander/actions-comment-pull-request@v2
      with:
        filePath: comment.md
        comment_tag: actions-validator

    - name: Post results in PR (success)
      if: success()
      uses: thollander/actions-comment-pull-request@v2
      with:
        message: "## :white_check_mark: Github Actions validator passed"
        comment_tag: actions-validator
